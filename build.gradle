buildscript {
  repositories {
    maven {
      name "forge"
      url "https://files.minecraftforge.net/maven"
    }
    jcenter()
    mavenCentral()
    maven {
      name "Sponge"
      url "https://repo.spongepowered.org/repository/maven-public/"
      content { includeGroup "org.spongepowered" }
    }
    maven { url = 'https://dist.creeper.host/Sponge/maven' }
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
  }
}

plugins {
  id "com.diffplug.spotless" version "6.4.1"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'org.spongepowered.mixin'

mixin {
  add sourceSets.main, "rbm.refmap.json"
}

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

def mc_version = "1.16.4"

version = "${mc_version}-${config.build_number}"
if (System.getenv().RELEASE_MODE == null) {
  version += '-SNAPSHOT'
}

group = 'eu.tmuniversal.rbm' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation" << "-Werror"

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  // The mappings can be changed at any time, and must be in the following format.
  // snapshot_YYYYMMDD   Snapshot are built nightly.
  // stable_#            Stables are built at the discretion of the MCP team.
  // Use non-default mappings at your own risk. they may not always work.
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'snapshot', version: config.mappingsVersion
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      properties 'mixin.env.disableRefMap': 'true'

      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        rbm {
          source sourceSets.main
        }
      }
    }

    server {
      properties 'mixin.env.disableRefMap': 'true'

      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        rbm {
          source sourceSets.main
        }
      }
    }

    data {
      properties 'mixin.env.disableRefMap': 'true'

      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'rbm', '--all',
        '--existing', file('src/main/resources').toString(),
        '--existing', file('src/generated/resources').toString(),
        '--output', file('src/generated/resources/')

      mods {
        rbm {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  maven {
    url "https://dvs1.progwml6.com/files/maven"
  }
  maven {
    url 'https://maven.theillusivec4.top/'
  }
  maven {
    url 'https://maven.tehnut.info'
  }
  maven {
    url 'https://www.dogforce-games.com/maven/'
  }
}

dependencies {
  minecraft 'net.minecraftforge:forge:' + mc_version + '-' + config.forgeVersion

  annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

  compile fileTree(dir: 'libs', include: '*.jar')

  compileOnly fg.deobf('mezz.jei:jei-' + config.jeiVersion + ':api')
  runtimeOnly fg.deobf('mezz.jei:jei-' + config.jeiVersion)

  compile fg.deobf('mcp.mobius.waila:Hwyla:' + config.hwylaVersion)
}

spotless {
  enforceCheck = false // workaround around jenkins having wrong line endings in some files
  // we explicitly check in github actions builds
  java {
    indentWithSpaces()
    licenseHeaderFile('spotless/license_template.txt')
    removeUnusedImports()
  }
}

pmd {
  toolVersion '6.22.0'
  incrementalAnalysis.set(true)
  ruleSets.clear()
  ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

task checkSyntax(group: "verification") {
  dependsOn spotlessJavaCheck, pmdMain
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
      "Specification-Title"     : project.name,
      "Specification-Vendor"    : config.author,
      "Specification-Version"   : "1", // We are version 1 of ourselves
      "Implementation-Title"    : project.name,
      "Implementation-Version"  : "${version}",
      "Implementation-Vendor"   : config.author,
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      "MixinConnector"          : "eu.tmuniversal.rbm.common.MixinConnector"
    ])
  }

  exclude "**/*.bat"
  exclude "**/*.psd"
  exclude "**/*.exe"
}

processResources {
  // Exclude datagenerator .cache directory
  exclude '.cache'

  filesMatching('data/botania/patchouli_books/lexicon/book.json') {
    filter {
      it.replaceAll("buildNumber", config.build_number)
    }
  }
}

task srcJar(type: Jar) {
  from(sourceSets.main.java)
  classifier = 'sources'
}

artifacts {
  archives srcJar
}

/**
 * Increments the buildnumber in your config file, and saves it
 * Note: The doFirst is important, without it the build number
 * will be incremented every time tasks are configured, i.e every
 * time gradle is run on this project.
 */
task incrementBuildNumber {
  doFirst {
    config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {
      config.toProperties().store(it, "")
    }
  }
}

def parseConfig(File config) {
  if (config.exists()) {
    config.withReader {
      def prop = new Properties()
      prop.load(it)
      return (new ConfigSlurper().parse(prop))
    }
  } else {
    return null
  }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
  tasks.publish.dependsOn build
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId project.archivesBaseName
      version project.version
      from components.java
      artifact srcJar
      pom.withXml {
        def node = asNode()
        if (node.dependencies.size() > 0)
          node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
      }
    }
  }

  repositories {
    maven {
      url "file://" + System.getenv("local_maven")
    }
  }
}

// Prevent Mixin annotation processor from getting into IDEA's annotation processor settings
if (System.getProperty("idea.sync.active") == "true") {
  afterEvaluate {
    tasks.withType(JavaCompile).all {
      it.options.annotationProcessorPath = files()
    }
  }
}

defaultTasks 'clean', 'checkSyntax', 'build'
